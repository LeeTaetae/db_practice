UPDATE TBL_PRODUCT 
SET PRODUCT_STOCK = 100
WHERE ID = 2;

SELECT * FROM TBL_PRODUCT;

-- 정렬
-- ORDER BY 
-- 오름차순(DEFAULT) 컬럼명 : ASC : 오름차순
-- 내림차순() 컬럼명 : DESC : 내림차순

SELECT *
FROM TBL_PRODUCT 
WHERE PRODUCT_NAME = '배승원의 그램'
ORDER BY ID DESC;

--========================================================
-- 서브 쿼리(SUB QUERY)
-- 평균 가격보다 가격이 낮은 상품의 ID를 조회
SELECT * FROM TBL_PRODUCT WHERE PRODUCT_PRICE < (SELECT AVG(PRODUCT_PRICE) FROM TBL_PRODUCT);

-- WHERE 절 : SCALAR
-- 평균 재고보다 큰 상품을 조회
SELECT * FROM TBL_PRODUCT WHERE PRODUCT_STOCK > (SELECT AVG(PRODUCT_STOCK) FROM TBL_PRODUCT) ORDER BY ID DESC;

-- FROM 절 : IN LINE VEIW
-- 재고가 20개 상품의 평균 가격
SELECT AVG(PRODUCT_PRICE) AS "평균 가격" FROM (SELECT * FROM TBL_PRODUCT WHERE PRODUCT_STOCK = 20);

--SELECT 절 : SUB QUERY
SELECT TP.PRODUCT_NAME, (SELECT AVG(PRODUCT_PRICE) FROM (SELECT * FROM TBL_PRODUCT WHERE PRODUCT_STOCK = 20)) AS "흠" FROM TBL_PRODUCT TP;

-- 사용자가 게시판에 글을 작성하는 서비스

CREATE SEQUENCE SEQ_USER;
CREATE TABLE TBL_USER(
	ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
	USER_EMAIL VARCHAR2(255) NOT NULL UNIQUE,
	USER_PASSWORD VARCHAR2(255) NOT NULL,
	USER_ADDRESS VARCHAR2(255),
	USER_BIRTH DATE
);

DROP TABLE TBL_REPLY;
DROP TABLE TBL_POST;
DROP TABLE TBL_USER;

CREATE SEQUENCE SEQ_POST;
CREATE TABLE TBL_POST(
	ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
	POST_TITLE VARCHAR2(255) NOT NULL,
	POST_CONTENT VARCHAR2(255) NOT NULL,
	USER_ID NUMBER,
	CONSTRAINT FK_POST_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID)
);

-- 댓글
CREATE SEQUENCE SEQ_REPLY;
CREATE TABLE TBL_REPLY(
	ID NUMBER CONSTRAINT PK_REPLY PRIMARY KEY,
	REPLY_CONTENT VARCHAR2(255),
	USER_ID NUMBER,
	POST_ID NUMBER,
	CONSTRAINT FK_REPLY_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID),
	CONSTRAINT FK_REPLY_POST FOREIGN KEY(POST_ID)
	REFERENCES TBL_POST(ID)
);

INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'hgd1234@gmial.com', 1234, '서울시 강남구', '2002-07-15');

INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'jbgd1234@gmial.com', 1234, '경기도 성남시', '2002-01-23');

INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'lss1234@gmial.com', 1234, '수원시 팔달구', '1998-03-01');

INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'kyh1234@naver.com', 1234, '서울시 마포구', '2002-07-15');

INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'ksc1234@naver.com', 1234, '서울시 동작구', '1992-03-30');

INSERT INTO TBL_USER
VALUES(SEQ_USER.NEXTVAL, 'cjs1234@gmial.com', 1234, '화성시 동탄', '2002-02-18');

INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '이승찬 맥북 갖다버려!', '컴퓨터는 역시 그램', 1);

INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '배승원 카드 놀이 좀 그만해', '알탭 천재 배승원', 2);

INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '마우스 뭐가 좋아요?', '마우스 고장났는데 새로 사고 싶어요', 2);

INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '100만원으로 살 수 있는 컴퓨터 있나요?', '기존의 컴퓨터가 고장났어요', 5);

INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '아직 다 못 썼어요', '제가 안 썼어요, 저도 몰라요', 2);

INSERT INTO TBL_POST 
VALUES(SEQ_POST.NEXTVAL, '레전드 네버 다이', '나는 페이커', 1);

SELECT * FROM TBL_POST;

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 감히', 6 , 1);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 쯧', 6 , 2);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형은 나의 도구', 6 , 2);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 밥 좀 사줘요', 6 , 1);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '그램보단 콩순이', 2 , 1);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '갤럭시북 세일할 때 사세요', 1 , 7);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '와 진짜 저건 저항받겠다 인성 ㄷㄷ', 2 , 7);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '맥북 에어 사세요', 1 , 1);

INSERT INTO TBL_REPLY
VALUES(SEQ_REPLY.NEXTVAL, '한민이형 질문 좀 해도 될까요?', 6 , 1);

SELECT * FROM TBL_USER;
SELECT * FROM TBL_POST;
SELECT * FROM TBL_REPLY;

-- 6번 사용자가 단 댓글을 단 게시글의 목록
SELECT * FROM TBL_POST WHERE ID IN (SELECT POST_ID FROM TBL_REPLY WHERE USER_ID = 6);

-- 댓글을 단 사용자의 정보 중 사용자ID와 주소 조회
SELECT USER_ID FROM TBL_REPLY;
SELECT ID, USER_ADDRESS FROM TBL_USER WHERE ID IN (SELECT USER_ID FROM TBL_REPLY);

-- 댓글을 가장 많이 단 사용자 조회
SELECT MAX(USER_ID) FROM TBL_REPLY;
SELECT * FROM TBL_USER WHERE ID IN (SELECT MAX(USER_ID) FROM TBL_REPLY);
SELECT *FROM TBL_USER WHERE ID = (SELECT MAX(USER_ID)FROM TBL_REPLY);

SELECT USER_ID FROM TBL_REPLY GROUP BY USER_ID HAVING COUNT(USER_ID) = (SELECT MAX(COUNT(USER_ID)) FROM TBL_REPLY);
SELECT * FROM TBL_USER WHERE ID = (SELECT USER_ID FROM TBL_REPLY GROUP BY USER_ID HAVING COUNT(USER_ID) = (SELECT MAX(COUNT(USER_ID)) FROM TBL_REPLY GROUP BY USER_ID));
-- 댓글이 가장 많이 달린 게시글 조회
SELECT MAX(COUNT(POST_ID)) 
FROM TBL_REPLY  
GROUP BY POST_ID;


SELECT POST_ID  
FROM TBL_REPLY;


SELECT * 
FROM TBL_POST 
WHERE ID IN (
	SELECT MAX(POST_ID) 
	FROM TBL_REPLY 
	WHERE ID IN (
		SELECT MAX(POST_ID) 
		FROM TBL_REPLY  
		GROUP BY POST_ID
		) 
);

-- ROUNUM 행 번호를 가져옴
-- 2개 행
SELECT * FROM TBL_POST WHERE ID IN(SELECT POST_ID FROM (SELECT POST_ID FROM TBL_REPLY GROUP BY POST_ID ORDER BY COUNT(POST_ID) DESC) WHERE ROWNUM <= 1);

-- 댓글과 게시글을 둘 다 작성한 유저 조회
SELECT USER_ID FROM TBL_REPLY;
SELECT USER_ID FROM TBL_POST;

SELECT *FROM TBL_USER WHERE ID IN(SELECT USER_ID FROM TBL_REPLY);
SELECT *FROM TBL_USER WHERE ID IN (SELECT USER_ID FROM TBL_POST WHERE ID IN(SELECT USER_ID FROM TBL_REPLY));

-- 제목에 맥북을 포함하고 있는 게시글에 달린 댓글 조회
SELECT * FROM TBL_POST WHERE POST_TITLE LIKE '%맥북%';
SELECT * FROM TBL_REPLY WHERE ID IN (SELECT POST_ID FROM TBL_POST WHERE POST_TITLE LIKE '%맥북%');

-- 내용에 컴퓨터를 포함하고 있는 글을 작성한 유저의 이메일
SELECT * FROM TBL_POST WHERE POST_CONTENT LIKE '%컴퓨터%';
SELECT ID, USER_EMAIL FROM TBL_USER;

SELECT USER_EMAIL FROM TBL_USER WHERE ID IN (SELECT USER_ID FROM TBL_POST WHERE POST_CONTENT LIKE '%컴퓨터%'  );

-- 내용에 고장을 포함하고 있는 글에 댓글을 작성한 유저 조회
SELECT * FROM TBL_POST WHERE POST_CONTENT LIKE '%고장%';
SELECT * FROM TBL_REPLY WHERE POST_ID = 7;
SELECT * FROM TBL_REPLY WHERE POST_ID = 10;


SELECT * FROM TBL_REPLY WHERE POST_ID IN(SELECT ID FROM TBL_POST WHERE POST_CONTENT LIKE '%고장%');
SELECT * FROM TBL_USER WHERE ID IN (SELECT USER_ID FROM TBL_REPLY WHERE POST_ID IN(SELECT ID FROM TBL_POST WHERE POST_CONTENT LIKE '%고장%'));

-- 경기도에 거주하면서 댓글을 단 사용자 조회
SELECT ID, USER_ADDRESS FROM TBL_USER WHERE USER_ADDRESS LIKE '%경기도%';
SELECT * FROM TBL_REPLY WHERE USER_ID IN (SELECT ID FROM TBL_USER WHERE USER_ADDRESS LIKE '%경기도%');
SELECT * FROM TBL_USER WHERE ID IN (SELECT USER_ID FROM TBL_REPLY WHERE USER_ID IN (SELECT ID FROM TBL_USER WHERE USER_ADDRESS LIKE '%경기도%'));


-- 5) 가장 나이가 어린 사용자가 작성한 게시글들 조회, ROWNUM
SELECT * FROM TBL_USER ORDER BY USER_BIRTH DESC;
SELECT * FROM TBL_POST WHERE USER_ID IN (SELECT * FROM );
--SELECT * FROM TBL_POST WHERE ID IN ()

-- 서울에 살고 있는 인원 수에 해당하는 번호에 게시글 조회
SELECT COUNT(ID) FROM TBL_USER WHERE USER_ADDRESS LIKE '%경기%';
SELECT * FROM TBL_POST;
SELECT * FROM TBL_POST WHERE ID = (SELECT COUNT(ID) FROM TBL_USER WHERE USER_ADDRESS LIKE '%경기%');

-- 주소가 구로 끝나는 유저가 작성한 게시글에 달린 모든 댓글들 조회
SELECT  * FROM TBL_USER;
SELECT ID FROM TBL_USER WHERE USER_ADDRESS LIKE '%구';
SELECT * FROM TBL_POST;
SELECT * FROM TBL_POST WHERE USER_ID IN (SELECT ID FROM TBL_USER WHERE USER_ADDRESS LIKE '%구');

-- 댓글에 한민이가 포함된 게시글에 달린 모든 댓글 조회
SELECT * FROM TBL_REPLY WHERE REPLY_CONTENT LIKE '%한민%';
SELECT * FROM TBL_POST WHERE ID IN (SELECT ID FROM TBL_REPLY WHERE REPLY_CONTENT LIKE '%한민%');
SELECT * FROM TBL_REPLY WHERE POST_ID IN(SELECT ID FROM TBL_POST WHERE ID IN (SELECT POST_ID FROM TBL_REPLY WHERE REPLY_CONTENT LIKE '%한민%'));


-- 평균 댓글 개수보다 작게 달린 게시글을 작성한 유저
SELECT AVG(ID) FROM TBL_REPLY;
SELECT * FROM TBL_REPLY;
SELECT COUNT(ID) FROM TBL_POST WHERE ID IN (SELECT AVG(ID) FROM TBL_REPLY GROUP BY ID HAVING COUNT(ID) < AVG(ID));
SELECT * FROM TBL_USER WHERE ID IN (SELECT COUNT(ID) FROM TBL_POST WHERE USER_ID IN (SELECT AVG(ID) FROM TBL_REPLY GROUP BY ID HAVING COUNT(ID) < AVG(ID)));

-- 가장 댓글을 적게 작성한 유저가 작성한 게시글
SELECT MIN(USER_ID) FROM TBL_REPLY;
SELECT * FROM TBL_POST;
SELECT * FROM TBL_POST WHERE USER_ID IN (SELECT MIN(USER_ID) FROM TBL_REPLY);