--환자
--아이디,
--이름,
--성별,
--생일,
--핸드폰,
--주소
CREATE SEQUENCE SEQ_PATIENT;
CREATE TABLE TBL_PATIENT(
	ID NUMBER CONSTRAINT PK_PATIENT PRIMARY KEY,
	PATIENT_NAME VARCHAR2(255) NOT NULL,
	PATIENT_GENDER CHAR(10) CONSTRAINT GENDER_TYPE CHECK (PATIENT_GENDER IN ('남' , '여')),
	PATIENT_BIRTH DATE,
	PATIENT_PHONE VARCHAR2(255),
	PATIENT_ADDRESS VARCHAR2(255)
);

--의사
--아이디
--이름
--부서
--방

CREATE SEQUENCE SEQ_DOCTOR;
CREATE TABLE TBL_DOCTOR(
	ID NUMBER CONSTRAINT PK_POCTOR PRIMARY KEY,
	DOCTOR_NAME VARCHAR2(255),
	DOCTOR_DEPARTMENT VARCHAR2(255) NOT NULL,
	DOCTOR_ROOM VARCHAR2(255)
);

--예약
--아이디
--환자아이디
--의사아이디
--예약날자
--상태
--메모
CREATE SEQUENCE SEQ_RESERVATION;
CREATE TABLE TBL_RESERVATION(
	ID NUMBER CONSTRAINT PK_RESERVATION PRIMARY KEY,
	RESERVATION_DATE DATE,
	RESERVATION_STATUS CHAR(20) CONSTRAINT STATUS_TYPE CHECK(RESERVATION_STATUS IN ('예약','진료중','완료','취소')),
	RESERVATION_MEMO VARCHAR2(255),
	PATIENT_ID NUMBER,
	DOCTOR_ID NUMBER,
	CONSTRAINT FK_RESERVATION_PATIENT FOREIGN KEY(PATIENT_ID)
	REFERENCES TBL_PATIENT(ID),
	CONSTRAINT FK_RESERVATION_DOCTOR FOREIGN KEY(DOCTOR_ID)
	REFERENCES TBL_DOCTOR(ID)
);


--
 







환자
INSERT INTO TBL_PATIENT VALUES (SEQ_PATIENT.NEXTVAL, '김철수', '남', DATE '1999-03-08', '010-1111-1111', '서울 강북구 수유동');
INSERT INTO TBL_PATIENT VALUES (SEQ_PATIENT.NEXTVAL, '이태희', '여', DATE '2001-08-15', '010-2222-2222', '서울 송파구 잠실동');
INSERT INTO TBL_PATIENT VALUES (SEQ_PATIENT.NEXTVAL, '박영희', '여', DATE '1995-01-02', '010-3333-3333', '서울 강남구 역삼동');
INSERT INTO TBL_PATIENT VALUES (SEQ_PATIENT.NEXTVAL, '최민수', '남', DATE '1988-12-30', '010-4444-4444', '경기 성남시 분당구');
INSERT INTO TBL_PATIENT VALUES (SEQ_PATIENT.NEXTVAL, '정우성', '남', DATE '1982-07-07', '010-5555-5555', '부산 해운대구');

-- 의사
INSERT INTO TBL_DOCTOR VALUES (SEQ_DOCTOR.NEXTVAL, '한도윤', '내과',  '101');
INSERT INTO TBL_DOCTOR VALUES (SEQ_DOCTOR.NEXTVAL, '서지수', '피부과','202');
INSERT INTO TBL_DOCTOR VALUES (SEQ_DOCTOR.NEXTVAL, '오세훈', '정형외과','303');
INSERT INTO TBL_DOCTOR VALUES (SEQ_DOCTOR.NEXTVAL, '유소아', '소아과','404');

-- 예약 (편의를 위해 SYSDATE 기준 다양한 상태/일시 배치)
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL,  SYSDATE - 10/24, '완료',  '감기 증상', 1, 1);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  1,  '예약',  '여드름 치료', 2, 2);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE -  2,   '완료',  '피부 트러블' , 3, 2);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  3,   '예약',  '건강검진 상담' , 3, 1);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE -  1,   '진료중','무릎 통증' , 4, 3);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  2,   '예약',  '허리 통증' , 5, 3);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  3,   '예약',  '피부 체크' ,  1, 2);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE -  7,   '취소',  '복통' , 2, 1);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  2,   '완료',  '손목 통증' , 3, 3);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  2,   '예약',  '장염' , 3, 4);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  2,   '예약',  '위염' , 1, 4);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  2,   '취소',  '장염' , 2, 4);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  4,   '취소',  '감기' , 2, 4);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  4,   '예약',  NULL , 2, 2);
INSERT INTO TBL_RESERVATION VALUES (SEQ_RESERVATION.NEXTVAL, SYSDATE +  4,   '예약',  ' ' , 2, 2);


-- 피부과’ 의사에게 잡힌 모든 예약의 환자이름, 예약일시, 상태를 조회
SELECT * FROM TBL_DOCTOR WHERE DOCTOR_DEPARTMENT = '피부과';
SELECT PATIENT_NAME, RESERVATION_DATE, RESERVATION_STATUS 
FROM TBL_RESERVATION TR 
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID 
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID 
WHERE TD.ID 
IN (
	SELECT ID 
	FROM TBL_DOCTOR 
	WHERE DOCTOR_DEPARTMENT = '피부과'
);


--각 의사별 예약 건수(취소 제외: 예약/진료중/완료)를 구하고, 건수 내림차순
SELECT DOCTOR_NAME, COUNT(RESERVATION_STATUS)  
FROM TBL_RESERVATION TR 
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID 
WHERE TR.RESERVATION_STATUS 
IN (
	'진료중', '예약', '완료'
) 
GROUP BY DOCTOR_NAME 
ORDER BY DOCTOR_NAME DESC;


--오늘 이후(SYSDATE 이상) 예약이 있는 환자 이름과 담당의사, 진료과
SELECT PATIENT_NAME, DOCTOR_NAME, DOCTOR_DEPARTMENT, RESERVATION_DATE 
FROM TBL_RESERVATION TR 
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID 
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID 
WHERE RESERVATION_DATE >= SYSDATE;

--‘정형외과’에서 완료 처리된 예약의 환자 수(중복 없이)
SELECT DOCTOR_DEPARTMENT,  COUNT( DISTINCT TP.ID) FROM TBL_RESERVATION TR JOIN TBL_PATIENT TP ON TR.PATIENT_ID = TP.ID JOIN TBL_DOCTOR TD ON TR.DOCTOR_ID = TD.ID WHERE DOCTOR_DEPARTMENT = '정형외과' AND RESERVATION_STATUS = '완료' GROUP BY DOCTOR_DEPARTMENT;

--5) 환자별 마지막(가장 최근) 예약 일시를 구하라
SELECT PATIENT_NAME, MAX(RESERVATION_DATE) 
FROM TBL_RESERVATION TR 
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID 
GROUP BY PATIENT_NAME;

--6) ‘김철수’가 방문(완료 혹은 진료중)한 진료과 목록(중복 제거)
SELECT DISTINCT TD.DOCTOR_DEPARTMENT, PATIENT_NAME
FROM TBL_RESERVATION TR 
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID 
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID 
WHERE PATIENT_NAME = '김철수' AND RESERVATION_STATUS IN ('완료' , '진료중');

--7) 예약 상태가 ‘예약’인 건을 ‘취소’로 일괄 변경(미래 예약만)
UPDATE TBL_RESERVATION 
SET RESERVATION_STATUS = '예약' 
WHERE RESERVATION_STATUS = '취소' 
AND RESERVATION_DATE > SYSDATE;

SELECT * FROM TBL_RESERVATION;

--8) ‘소아과’ 담당 의사별 예약 대기(STATUS='예약') 건수를 구해 이름, 진료과, 건수
SELECT DOCTOR_NAME, DOCTOR_DEPARTMENT, COUNT(RESERVATION_STATUS)
FROM TBL_RESERVATION TR 
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE RESERVATION_STATUS = '예약'
AND DOCTOR_DEPARTMENT = '소아과'
GROUP BY DOCTOR_NAME, DOCTOR_DEPARTMENT;

--9) 주소에 ‘강북구’가 포함된 환자들의 최근 예약(가장 큰 RESERVATION_DATE)만 조회
SELECT PATIENT_NAME, MAX(RESERVATION_DATE) 
FROM TBL_RESERVATION TR
JOIN TBL_PATIENT TP
ON TR.PATIENT_ID = TP.ID 
WHERE PATIENT_ADDRESS LIKE '%강북구%'
GROUP BY PATIENT_NAME;

--10) 의사별로 ‘완료’된 예약의 평균 일수 지연 (예약일 기준 오늘까지 경과일, 예시 계산)
SELECT DOCTOR_NAME AS "의사 이름", AVG(TRUNC(RESERVATION_DATE) - TRUNC(SYSDATE)) || '일' AS "평균 지연 일수"
FROM TBL_RESERVATION TR
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE RESERVATION_STATUS = '완료'
GROUP BY DOCTOR_NAME;

--11) 환자 ‘이태희’의 향후 예약을 가장 빠른 순으로 1건만 조회
SELECT PATIENT_NAME, RESERVATION_DATE
FROM TBL_RESERVATION TR
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID
WHERE PATIENT_NAME = '이태희' AND RESERVATION_DATE > SYSDATE
ORDER BY RESERVATION_DATE ASC
FETCH FIRST 1 ROWS ONLY;

--SELECT *
--FROM (
--	SELECT PATIENT_NAME, RESERVATION_DATE
--	FROM TBL_RESERVATION TR
--	JOIN TBL_PATIENT TP 
--	ON TR.PATIENT_ID = TP.ID
--	WHERE PATIENT_NAME = '이태희' AND RESERVATION_DATE > SYSDATE
--	ORDER BY RESERVATION_DATE ASC
--)
--FETCH FIRST 1 ROWS ONLY;

--12) 진료과별(부서별) 환자 수(예약 있는 환자 기준, 중복 제거)
SELECT DOCTOR_DEPARTMENT AS "진료과", COUNT(DISTINCT TP.ID) || '명' AS "환자 수" 
FROM TBL_RESERVATION TR
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE RESERVATION_STATUS = '예약'
GROUP BY DOCTOR_DEPARTMENT;

--13) ‘취소’ 예약 중, 같은 환자가 같은 의사에게 중복으로 취소한 건 삭제(중복 정제)
SELECT  TP.PATIENT_NAME, DOCTOR_NAME, COUNT(RESERVATION_STATUS)
FROM TBL_RESERVATION TR
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE RESERVATION_STATUS = '취소'
GROUP BY PATIENT_NAME, DOCTOR_NAME
HAVING COUNT(RESERVATION_STATUS) > 1;

SELECT  TR.PATIENT_ID, TR.DOCTOR_ID, COUNT(RESERVATION_STATUS)
	FROM TBL_RESERVATION TR
	WHERE RESERVATION_STATUS = '취소'
	GROUP BY TR.PATIENT_ID, TR.DOCTOR_ID
	HAVING COUNT(RESERVATION_STATUS) > 1;

SELECT ID, COUNT(RESERVATION_STATUS)
	FROM TBL_RESERVATION 
	WHERE RESERVATION_STATUS = '취소'
	GROUP BY ID
	HAVING COUNT(RESERVATION_STATUS) > 1;

--DELETE FROM TBL_RESERVATION R WHERE R.ID IN (
--	SELECT  TR.PATIENT_ID, TR.DOCTOR_ID, COUNT(RESERVATION_STATUS)
--	FROM TBL_RESERVATION TR
--	WHERE RESERVATION_STATUS = '취소'
--	GROUP BY TR.PATIENT_ID, TR.DOCTOR_ID
--	HAVING COUNT(RESERVATION_STATUS) > 1;
--);
SELECT MIN(ID)
    FROM TBL_RESERVATION
    WHERE RESERVATION_STATUS = '취소'
    GROUP BY PATIENT_ID, DOCTOR_ID;


DELETE FROM TBL_RESERVATION
WHERE ID NOT IN (
    SELECT MIN(ID)
    FROM TBL_RESERVATION
    WHERE RESERVATION_STATUS = '취소'
    GROUP BY PATIENT_ID, DOCTOR_ID
);

SELECT PATIENT_ID, DOCTOR_ID FROM TBL_RESERVATION ;

SELECT MAX(ID)
   FROM TBL_RESERVATION
   WHERE RESERVATION_STATUS = '취소'
   GROUP BY PATIENT_ID, DOCTOR_ID
   HAVING COUNT(RESERVATION_STATUS) > 1;

DELETE FROM TBL_RESERVATION 
WHERE PATIENT_ID, DOCTOR_ID IN (
   SELECT PATIENT_ID, DOCTOR_ID
   FROM TBL_RESERVATION
   WHERE RESERVATION_STATUS = '취소'
   GROUP BY PATIENT_ID, DOCTOR_ID
   HAVING COUNT(RESERVATION_STATUS) > 1
); 

DELETE
FROM TBL_RESERVATION
WHERE ID IN (
   SELECT rt.ID
   FROM TBL_RESERVATION rt
   JOIN(
      SELECT PATIENT_ID, DOCTOR_ID
      FROM TBL_RESERVATION
      WHERE RESERVATION_STATUS = '취소'
      GROUP BY PATIENT_ID, DOCTOR_ID
      HAVING COUNT(RESERVATION_STATUS) > 1
   ) st
   ON rt.PATIENT_ID = st.PATIENT_ID AND rt.DOCTOR_ID = st.DOCTOR_ID
);
--GROUP BY DOCTOR_ID, PATIENT_ID
--HAVING COUNT(RESERVATION_STATUS) > 1;
--DELETE FROM TBL_RESERVATION
--	SELECT  TP.PATIENT_NAME, DOCTOR_NAME, COUNT(RESERVATION_STATUS)
--	FROM TBL_RESERVATION TR
--	JOIN TBL_PATIENT TP 
--	ON TR.PATIENT_ID = TP.ID
--	JOIN TBL_DOCTOR TD 
--	ON TR.DOCTOR_ID = TD.ID
--	WHERE RESERVATION_STATUS = '취소'
--	GROUP BY PATIENT_NAME, DOCTOR_NAME
--	ORDER BY PATIENT_NAME, DOCTOR_NAME ASC

--DELETE FROM TBL_APPOINTMENT
--WHERE ROWID IN (
--  SELECT rid FROM (
--    SELECT ROWID AS rid,
--           ROW_NUMBER() OVER (PARTITION BY PATIENT_ID, DOCTOR_ID, STATUS ORDER BY APPT_DATE DESC, ID DESC) AS rn
--    FROM TBL_APPOINTMENT
--    WHERE STATUS = '취소'
--  )
--  WHERE rn > 1
--);

--14) ‘피부과’ 예약 중 메모가 비어있는 예약에 일괄 메모 추가(‘초진 문진 필요’)
SELECT * 
FROM TBL_RESERVATION tr
JOIN TBL_DOCTOR td
ON tr.DOCTOR_ID = td.ID
WHERE DOCTOR_DEPARTMENT = '피부과';

SELECT * FROM TBL_RESERVATION WHERE RESERVATION_MEMO IS NULL;
SELECT * FROM TBL_RESERVATION WHERE DOCTOR_ID = 2;

UPDATE TBL_RESERVATION 
SET RESERVATION_MEMO = '초기 문진 필요' 
WHERE RESERVATION_MEMO IS NULL AND DOCTOR_ID IN (SELECT ID FROM TBL_DOCTOR WHERE DOCTOR_DEPARTMENT = '피부과');

--15) 만 25세 이하 환자들의 예약 현황(환자이름, 나이, 담당의사, 상태)
SELECT  *
FROM TBL_PATIENT
WHERE PATIENT_BIRTH < DATE '1999-01-01';


SELECT PATIENT_NAME, DOCTOR_NAME, RESERVATION_STATUS 
FROM TBL_RESERVATION TR
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE TP.PATIENT_BIRTH  > DATE '2000-01-01';

--16) 앞으로 3일 이내 예약(오늘 포함) 건을 ‘진료중’으로 변경 (예: 당일 일괄 전환 시나리오)
UPDATE TBL_RESERVATION 
SET RESERVATION_STATUS = '진료중'
WHERE RESERVATION_DATE >= SYSDATE AND RESERVATION_STATUS = '예약';


SELECT * FROM TBL_RESERVATION ;

--17) 의사 ‘한도윤(내과)’의 완료 건수와 취소 건수를 한 줄로 조회
SELECT DOCTOR_NAME, SUM(CASE WHEN RESERVATION_STATUS = '취소' THEN 1 ELSE 0 END) AS "취소 건수", SUM(CASE WHEN RESERVATION_STATUS = '완료' THEN 1 ELSE 0 END) AS "완료 건수"
FROM TBL_RESERVATION TR
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE DOCTOR_NAME = '한도윤'
GROUP BY DOCTOR_NAME;

--18) 환자 이름에 ‘희’가 포함된 사람들의 최근 예약 1건씩만 조회
SELECT * FROM TBL_PATIENT WHERE PATIENT_NAME LIKE '%희%';

SELECT PATIENT_NAME, COUNT(TR.ID)
FROM TBL_RESERVATION TR
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID
WHERE TP.ID IN (SELECT ID FROM TBL_PATIENT WHERE PATIENT_NAME LIKE '%희%')
	AND RESERVATION_DATE <= SYSDATE
GROUP BY PATIENT_NAME;


--19) 오늘 기준 지난 7일 동안 완료된 예약 수를 진료과별로 조회
SELECT DOCTOR_DEPARTMENT, COUNT(TR.ID)
FROM TBL_RESERVATION TR
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE SYSDATE - RESERVATION_DATE <= 7 
	AND RESERVATION_STATUS = '완료'
GROUP BY DOCTOR_DEPARTMENT;

--20) ‘정형외과’에서 예약만 있고 방문(완료/진료중) 기록은 한 번도 없는 환자 목록
SELECT PATIENT_NAME
FROM TBL_RESERVATION TR
JOIN TBL_PATIENT TP 
ON TR.PATIENT_ID = TP.ID
JOIN TBL_DOCTOR TD 
ON TR.DOCTOR_ID = TD.ID
WHERE DOCTOR_DEPARTMENT = '정형외과' AND RESERVATION_STATUS = '예약';