-- PARENT
-- ID(PK) 이름, 나이, 주소, 핸드폰, 성별

CREATE SEQUENCE SEQ_PARENT;
CREATE TABLE TBL_PARENT(
	ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
	PARENT_NAME VARCHAR2(255) NOT NULL,
	PARENT_AGE NUMBER NOT NULL,
	PARENT_ADDRESS VARCHAR2(255) NOT NULL,
	PARENT_PHONE VARCHAR2(255) NOT NULL,
	PARENT_GENDER CHAR(10),
	CONSTRAINT GENDER_TYPE CHECK(PARENT_GENDER IN('M', 'W'))
); 

DROP TABLE TBL_PARENT;

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '홍길동', 30,'경기도 과천시', '010-1234-5678', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '장보고', 37,'경기도 군포시', '010-4456-1223', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '김영희', 45,'경기도 안산시', '010-8813-6644', 'W');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '김철수', 50,'서울시 관악구', '010-1234-7777', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '이태희', 42 ,'경기도 고양시', '010-7711-2453', 'W');


SELECT * FROM TBL_PARENT;
SELECT PARENT_NAME FROM TBL_PARENT;
SELECT  PARENT_GENDER FROM TBL_PARENT;

-- WHERE 조건절 =
SELECT ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER FROM TBL_PARENT WHERE PARENT_GENDER = 'M';

--40대 부모 데이터를 조회
SELECT ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER FROM TBL_PARENT WHERE PARENT_AGE >= '40';
SELECT * FROM TBL_PARENT WHERE PARENT_AGE >= '40' AND PARENT_GENDER = 'W';

/*
 * 
 * LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 * 
 * %: 모든 것
 * _: 글자 수
 * 
 * 예시
 	'%A' : A로 끝나는 모든 값(NDFLSNJFA, 123NFJA, ...)
 	'A%' : A로 시작하는 모든 값(AA, ANDKFS, AJD, ...)
 	'A__' : A로 시작하며 3글자인 값(ABC, AAA, ADD, ...)(언더바 2개)
 	'_A' : A로 끝나며 2글자인 값(FA, CA, DA, ...)
 	'%A%' : A가 포함된 값(APPLE, BANANA, TASK, ...)
 * 
 * */

SELECT * FROM TBL_PARENT WHERE PARENT_ADDRESS LIKE '경기도%';
SELECT * FROM TBL_PARENT WHERE PARENT_ADDRESS LIKE '%시';

SELECT * FROM TBL_PARENT WHERE PARENT_NAME LIKE '%희';
SELECT * FROM TBL_PARENT WHERE PARENT_ADDRESS LIKE '%과천%';
SELECT * FROM TBL_PARENT WHERE PARENT_ADDRESS NOT LIKE '%과천%';

SELECT * FROM TBL_PARENT WHERE PARENT_PHONE LIKE '%1234%';

--=============================================================
-- 집계함수
/*집계 함수
 * 
 * 평균 AVG()
 * 최대값 MAX()
 * 최소값 MIN()
 * 총 합 SUM()
 * 개수 COUNT()
 * 
 * */
CREATE SEQUENCE SEQ_FIELD_TRIP;
CREATE TABLE TBL_FIELD_TRIP(
	ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
	FIELD_TRIP_TITLE VARCHAR2(255),
	FIELD_TRIP_CONTENT VARCHAR2(255),
	FIELD_TRIP_NUMBER NUMBER
);
DROP TABLE TBL_FIELD_TRIP;

INSERT INTO TBL_FIELD_TRIP (ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER) 
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '어서와 매미농장', '매미 잡자 매미 잡자', 20);
INSERT INTO TBL_FIELD_TRIP (ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER) 
VALUES (SEQ_FIELD_TRIP.NEXTVAL, '곤충 박물관 견학', '신기한 곤충들을 만져보고 관찰하는 시간', 30);

INSERT INTO TBL_FIELD_TRIP (ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER) 
VALUES (SEQ_FIELD_TRIP.NEXTVAL, '딸기 농장 체험', '새콤달콤한 딸기를 직접 따서 먹어요', 25);

INSERT INTO TBL_FIELD_TRIP (ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER) 
VALUES (SEQ_FIELD_TRIP.NEXTVAL, '우주 과학관 탐험', '로켓과 별자리에 대해 배우는 신나는 시간', 28);

INSERT INTO TBL_FIELD_TRIP (ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER) 
VALUES (SEQ_FIELD_TRIP.NEXTVAL, '도예 공방 방문', '나만의 컵과 접시를 만드는 특별한 경험', 22);

INSERT INTO TBL_FIELD_TRIP (ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, FIELD_TRIP_NUMBER) 
VALUES (SEQ_FIELD_TRIP.NEXTVAL, '숲속 보물찾기', '숨겨진 보물을 찾아 자연을 탐험하는 놀이', 15);

SELECT * FROM TBL_FIELD_TRIP;

SELECT COUNT(ID) FROM TBL_FIELD_TRIP;

-- 컬럼 명 : ""
SELECT SUM(FIELD_TRIP_NUMBER) AS "총 수용 인원" FROM TBL_FIELD_TRIP;
SELECT MIN(FIELD_TRIP_NUMBER) AS "최소 인원 수" FROM TBL_FIELD_TRIP;

--  반올림 : ROUND(값, 자릿수)  
SELECT ROUND(AVG(FIELD_TRIP_NUMBER)) AS "평균 인원 수" FROM TBL_FIELD_TRIP;

--내림
SELECT FLOOR(AVG(FIELD_TRIP_NUMBER)) AS "평균 인원 수" FROM TBL_FIELD_TRIP;

--올림
SELECT CEIL(AVG(FIELD_TRIP_NUMBER)) AS "평균 인원 수" FROM TBL_FIELD_TRIP;

-- '체험' 글자를 포함하는 체험 학습의 총 인원수 조회
SELECT SUM(FIELD_TRIP_NUMBER) AS "체험 글자를 포함한 체험의 총 인원" FROM TBL_FIELD_TRIP WHERE FIELD_TRIP_TITLE LIKE '%체험%';

-- 고구마 또는 아이스크림이 들어간 체험 학습의 평균 인원수
SELECT AVG(FIELD_TRIP_NUMBER) AS "평균 인원 수" FROM TBL_FIELD_TRIP WHERE FIELD_TRIP_TITLE = '%딸기%' OR FIELD_TRIP_TITLE LIKE '%보물%';
SELECT MIN(FIELD_TRIP_NUMBER) AS "기로 끝나는 체험 학습의 최소 인원 수" FROM TBL_FIELD_TRIP WHERE FIELD_TRIP_TITLE LIKE '%기';


CREATE SEQUENCE SEQ_PRODUCT;
CREATE TABLE TBL_PRODUCT(
	ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(255),
	PRODUCT_PRICE NUMBER,
	PRODUCT_STOCK NUMBER
);

SELECT * FROM TBL_PRODUCT;

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 20);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 40);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 30);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 50);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 80);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 10);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 5000, 10);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 5000, 40);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 17);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 30);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 20);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRI
CE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 17);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 80);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 80);

INSERT INTO TBL_PRODUCT(ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 83);




--SELECT * FROM TBL_FIELD_TRIP WHERE FIELD_TRIP_NUMBER >AVG(FIELD_TRIP_NUMBER);I
-- 평균 인원보다 인원 수가 많은 체험 학습을 조회
-- 집계 함수를 사용할 수 있는 위치
-- 1. SELECT 절
-- 2. HAVING 

-- GROUP BY 
-- HAVING 
SELECT * FROM TBL_PRODUCT;
-- 1. SELECT 
-- 2. FROM
-- 생략가능
-- 3. WHERE 
-- 4. GROUP BY 
-- 5. GROUP BY 
-- 6. HAVING 
-- 7. ORDER BY 

-- 1. GROUP BY로 지정한 컬럼만 조회할 수 있다.
-- 2. 그룹 함수를 조회할 수 있다.
SELECT PRODUCT_NAME  , COUNT(PRODUCT_NAME) FROM TBL_PRODUCT GROUP BY PRODUCT_NAME;
SELECT PRODUCT_NAME AS "상품 명", PRODUCT_PRICE AS "상품 가격", COUNT(ID)AS "상품 개수" FROM TBL_PRODUCT GROUP BY PRODUCT_NAME, PRODUCT_PRICE;


-- HAVING GROUP BY의 조건절
SELECT PRODUCT_NAME AS "상품 명", PRODUCT_PRICE AS "상품 가격", COUNT(ID)AS "상품 개수" FROM TBL_PRODUCT GROUP BY PRODUCT_NAME, PRODUCT_PRICE HAVING COUNT(ID) > 2;
SELECT PRODUCT_NAME AS "상품 명", PRODUCT_PRICE AS "상품 가격", COUNT(ID)AS "상품 개수" FROM TBL_PRODUCT GROUP BY PRODUCT_NAME, PRODUCT_PRICE HAVING AVG(PRODUCT_PRICE) > 2000;

SELECT PRODUCT_PRICE AS "상품 가격", SUM(PRODUCT_STOCK) ||'개' AS "재고 수", COUNT(ID) FROM TBL_PRODUCT GROUP BY PRODUCT_PRICE;
SELECT COUNT(ID) AS "재고 수" FROM TBL_PRODUCT WHERE PRODUCT_STOCK >= 50;
SELECT AVG(PRODUCT_PRICE) AS "상품 가격" , PRODUCT_STOCK AS "재고 수" FROM TBL_PRODUCT  WHERE PRODUCT_STOCK < 30 GROUP BY PRODUCT_STOCK;
SELECT PRODUCT_PRICE AS "가격 대" , SUM(PRODUCT_PRICE) AS "총 가격"  FROM TBL_PRODUCT WHERE PRODUCT_STOCK < 30 GROUP BY PRODUCT_PRICE;
SELECT AVG(PRODUCT_PRICE) FROM TBL_PRODUCT;

SELECT * FROM TBL_PRODUCT WHERE PRODUCT_STOCK IN('20', '30', '40');
SELECT * FROM TBL_PRODUCT WHERE PRODUCT_PRICE IN ('1000', '5000', '3000');

SELECT PRODUCT_NAME AS "상품 명" , SUM(PRODUCT_STOCK) AS "상품 재고 수", AVG(PRODUCT_PRICE) AS "상품 평균 가격" FROM TBL_PRODUCT  WHERE PRODUCT_STOCK IN('10' , '20', '40') GROUP BY PRODUCT_STOCK, PRODUCT_NAME;

SELECT SUM(PRODUCT_STOCK + PRODUCT_PRICE) AS "재고와 가격의 합", SUM(PRODUCT_PRICE) || '원' AS "가격의 합", SUM(PRODUCT_STOCK) || '개' FROM TBL_PRODUCT;
SELECT PRODUCT_PRICE AS "가격대", SUM(PRODUCT_STOCK) AS "재고", PRODUCT_PRICE * SUM(PRODUCT_PRICE) AS "기대 수익" FROM TBL_PRODUCT GROUP BY PRODUCT_PRICE;

-- 가격대별 10000원으로 살 수 있는 '배승원의 그램' 의 개수
--SELECT FLOOR(10000/PRODUCT_PRICE) FROM TBL_PRODUCT GROUP BY PRODUCT_PRICE HAVING PRODUCT_NAME LIKE '배승원';
SELECT
   PRODUCT_NAME AS "상품 명",
   PRODUCT_PRICE AS "상품 가격",
   FLOOR(10000 / PRODUCT_PRICE) AS "구매 수량"
FROM TBL_PRODUCT
GROUP BY PRODUCT_NAME, PRODUCT_PRICE
HAVING PRODUCT_NAME LIKE '배승원의 그램';